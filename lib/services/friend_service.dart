import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../model/firestore.dart';

class FriendService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  String get currentUserId => _auth.currentUser!.uid;

  // ===== T√åM KI·∫æM USER =====
  
  // ‚úÖ S·ª¨A: Tr·∫£ v·ªÅ Map thay v√¨ Users
  Future<Map<String, dynamic>?> findUserByPhone(String phone) async {
    try {
      final query = await _firestore
          .collection('users')
          .where('phoneNumber', isEqualTo: phone)
          .limit(1)
          .get();

      if (query.docs.isEmpty) return null;
      
      final doc = query.docs.first;
      return {
        'uid': doc.id,
        'name': doc.data()['name'],
        'phoneNumber': doc.data()['phoneNumber'],
        'profileUrl': doc.data()['profileUrl'],
      };
    } catch (e) {
      print('Error finding user: $e');
      return null;
    }
  }

  // T√¨m theo t√™n (search)
  Future<List<Users>> searchUsersByName(String name) async {
    if (name.isEmpty) return [];
    
    try {
      final query = await _firestore
          .collection('users')
          .where('name', isGreaterThanOrEqualTo: name)
          .where('name', isLessThanOrEqualTo: name + '\uf8ff')
          .limit(20)
          .get();

      final results = <Users>[];
      for (var doc in query.docs) {
        if (doc.id != currentUserId) {
          results.add(Users.fromFirestore(doc, null));
        }
      }
      return results;
    } catch (e) {
      print('Error searching users: $e');
      return [];
    }
  }

  // L·∫•y th√¥ng tin user theo UID
  Future<Users?> getUserById(String uid) async {
    try {
      final doc = await _firestore.collection('users').doc(uid).get();
      if (!doc.exists) return null;
      return Users.fromFirestore(doc, null);
    } catch (e) {
      print('Error getting user: $e');
      return null;
    }
  }

  // ===== G·ª¨I L·ªúI M·ªúI K·∫æT B·∫†N =====
  
  Future<bool> sendFriendRequest(String toUserId) async {
    try {
      // Ki·ªÉm tra ƒë√£ l√† b·∫°n b√® ch∆∞a
      if (await isFriend(toUserId)) {
        print('Already friends');
        return false;
      }

      // Ki·ªÉm tra ƒë√£ g·ª≠i ch∆∞a
      final existing = await _firestore
          .collection('friendRequests')
          .where('senderId', isEqualTo: currentUserId)
          .where('receiverId', isEqualTo: toUserId)
          .where('status', isEqualTo: 'pending')
          .get();

      if (existing.docs.isNotEmpty) {
        print('Already sent request');
        return false;
      }

      // ‚úÖ Ki·ªÉm tra c√≥ b·ªã block kh√¥ng
      if (await isBlocked(toUserId)) {
        print('User blocked you');
        return false;
      }

      // G·ª≠i l·ªùi m·ªùi
      await _firestore.collection('friendRequests').add({
        'senderId': currentUserId,
        'receiverId': toUserId,
        'status': 'pending',
        'createdAt': FieldValue.serverTimestamp(),
      });

      return true;
    } catch (e) {
      print('Error sending friend request: $e');
      return false;
    }
  }

  // ===== CH·∫§P NH·∫¨N L·ªúI M·ªúI =====

  Future<bool> acceptFriendRequest(String requestId, String senderId) async {
    try {
      print('üîç Current user: $currentUserId');
      print('üîç Sender: $senderId');
      print('üîç Request ID: $requestId');

      // ‚úÖ Verify user is authenticated
      if (_auth.currentUser == null) {
        print('‚ùå Error: User not authenticated');
        return false;
      }
    
      // 1. Update request status
      await _firestore.collection('friendRequests').doc(requestId).update({
        'status': 'accepted',
      });
      print('‚úÖ Step 1: Updated request status');

      // 2. Th√™m UID v√†o friends c·ªßa current user
      await _firestore.collection('users').doc(currentUserId).update({
        'friends': FieldValue.arrayUnion([senderId]),
      });
      print('‚úÖ Step 2: Added $senderId to current user friends');

      // 3. Th√™m UID v√†o friends c·ªßa sender
      await _firestore.collection('users').doc(senderId).update({
        'friends': FieldValue.arrayUnion([currentUserId]),
      });
      print('‚úÖ Step 3: Added $currentUserId to sender friends');

      return true;
    } on FirebaseException catch (e) {
      print('‚ùå Firebase Error accepting friend request: ${e.code} - ${e.message}');
      if (e.code == 'permission-denied') {
        print('‚ùå Permission denied. Check Firestore security rules.');
      }
      return false;
    } catch (e) {
      print('‚ùå Error accepting friend request: $e');
      return false;
    }
  }

  // ===== T·ª™ CH·ªêI L·ªúI M·ªúI =====
  
  Future<bool> rejectFriendRequest(String requestId) async {
    try {
      // ‚úÖ C·∫¢I THI·ªÜN: X√≥a lu√¥n thay v√¨ update status
      // L√Ω do: Gi·∫£m d·ªØ li·ªáu r√°c, user kh√¥ng c·∫ßn xem l·∫°i request ƒë√£ t·ª´ ch·ªëi
      await _firestore.collection('friendRequests').doc(requestId).delete();
      
      // ‚ùå Ho·∫∑c n·∫øu mu·ªën gi·ªØ l·∫°i ƒë·ªÉ tracking:
      // await _firestore.collection('friendRequests').doc(requestId).update({
      //   'status': 'rejected',
      //   'rejectedAt': FieldValue.serverTimestamp(),
      // });
      
      return true;
    } catch (e) {
      print('Error rejecting friend request: $e');
      return false;
    }
  }

  // ===== L·∫§Y DANH S√ÅCH L·ªúI M·ªúI ƒê·∫æN =====
  
  Stream<List<FriendRequests>> getPendingRequests() {
    return _firestore
        .collection('friendRequests')
        .where('receiverId', isEqualTo: currentUserId)
        .where('status', isEqualTo: 'pending')
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => FriendRequests.fromFirestore(doc, null))
            .toList());
  }

  // ‚úÖ M·ªöI: L·∫•y danh s√°ch request ƒê√É G·ª¨I (ƒë·ªÉ hi·ªÉn th·ªã "ƒêang ch·ªù")
  Stream<List<FriendRequests>> getSentRequests() {
    return _firestore
        .collection('friendRequests')
        .where('senderId', isEqualTo: currentUserId)
        .where('status', isEqualTo: 'pending')
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => FriendRequests.fromFirestore(doc, null))
            .toList());
  }

  // ƒê·∫øm s·ªë l·ªùi m·ªùi ch∆∞a ƒë·ªçc
  Future<int> getPendingRequestsCount() async {
    try {
      final query = await _firestore
          .collection('friendRequests')
          .where('receiverId', isEqualTo: currentUserId)
          .where('status', isEqualTo: 'pending')
          .get();
      
      return query.docs.length;
    } catch (e) {
      return 0;
    }
  }

  // ===== L·∫§Y DANH S√ÅCH B·∫†N B√à =====
  
  Future<List<Users>> getFriends() async {
    try {
      final userDoc = await _firestore
          .collection('users')
          .doc(currentUserId)
          .get();

      final friendIds = List<String>.from(userDoc.data()?['friends'] ?? []);

      if (friendIds.isEmpty) return [];

      // Chia nh·ªè query (Firestore gi·ªõi h·∫°n 10 items trong whereIn)
      List<Users> allFriends = [];
      
      for (int i = 0; i < friendIds.length; i += 10) {
        final chunk = friendIds.skip(i).take(10).toList();
        final query = await _firestore
            .collection('users')
            .where(FieldPath.documentId, whereIn: chunk)
            .get();

        allFriends.addAll(
          query.docs.map((doc) => Users.fromFirestore(doc, null))
        );
      }

      return allFriends;
    } catch (e) {
      print('Error getting friends: $e');
      return [];
    }
  }

  // ===== L·∫§Y DANH S√ÅCH UID B·∫†N B√à =====
  
  // ‚ö†Ô∏è QUAN TR·ªåNG: Lu√¥n tr·∫£ v·ªÅ UID, kh√¥ng ph·∫£i phoneNumber
  // V√¨ sharedWith trong /images collection d√πng UID
  Future<List<String>> getFriendIds() async {
    try {
      final userDoc = await _firestore
          .collection('users')
          .doc(currentUserId)
          .get();

      return List<String>.from(userDoc.data()?['friends'] ?? []);
    } catch (e) {
      return [];
    }
  }

  // Stream danh s√°ch b·∫°n b√® (real-time)
  Stream<List<String>> getFriendsStream() {
    return _firestore
        .collection('users')
        .doc(currentUserId)
        .snapshots()
        .map((doc) => List<String>.from(doc.data()?['friends'] ?? []));
  }

  // ===== X√ìA B·∫†N B√à =====
  
  Future<bool> removeFriend(String friendId) async {
    try {
      print('üóëÔ∏è Removing friend: $friendId');
      print('üóëÔ∏è Current user: $currentUserId');
    
      // ‚úÖ Verify user is authenticated
      if (_auth.currentUser == null) {
        print('‚ùå Error: User not authenticated');
        return false;
      }

      // ‚úÖ Verify they are actually friends first
      final isFriendCheck = await isFriend(friendId);
      if (!isFriendCheck) {
        print('‚ùå Error: Not friends with this user');
        return false;
      }
    
      // 1. X√≥a kh·ªèi friends c·ªßa current user
      await _firestore.collection('users').doc(currentUserId).update({
        'friends': FieldValue.arrayRemove([friendId])
      });
      print('‚úÖ Step 1: Removed $friendId from current user');

      // 2. X√≥a kh·ªèi friends c·ªßa friend
      await _firestore.collection('users').doc(friendId).update({
        'friends': FieldValue.arrayRemove([currentUserId])
      });
      print('‚úÖ Step 2: Removed $currentUserId from friend');

      return true;
    } on FirebaseException catch (e) {
      print('‚ùå Firebase Error removing friend: ${e.code} - ${e.message}');
      if (e.code == 'permission-denied') {
        print('‚ùå Permission denied. Check Firestore security rules.');
      }
      return false;
    } catch (e) {
      print('‚ùå Error removing friend: $e');
      return false;
    }
  }

  // ===== KI·ªÇM TRA TR·∫†NG TH√ÅI =====
  
  // Ki·ªÉm tra ƒë√£ l√† b·∫°n b√® ch∆∞a
  Future<bool> isFriend(String userId) async {
    try {
      final doc = await _firestore
          .collection('users')
          .doc(currentUserId)
          .get();

      final friends = List<String>.from(doc.data()?['friends'] ?? []);
      return friends.contains(userId);
    } catch (e) {
      return false;
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i request
  Future<String?> getRequestStatus(String userId) async {
    try {
      // Ki·ªÉm tra ƒë√£ g·ª≠i request ch∆∞a
      final sent = await _firestore
          .collection('friendRequests')
          .where('senderId', isEqualTo: currentUserId)
          .where('receiverId', isEqualTo: userId)
          .where('status', isEqualTo: 'pending')
          .get();

      if (sent.docs.isNotEmpty) return 'sent';

      // Ki·ªÉm tra c√≥ request ƒë·∫øn kh√¥ng
      final received = await _firestore
          .collection('friendRequests')
          .where('senderId', isEqualTo: userId)
          .where('receiverId', isEqualTo: currentUserId)
          .where('status', isEqualTo: 'pending')
          .get();

      if (received.docs.isNotEmpty) return 'received';

      return null;
    } catch (e) {
      return null;
    }
  }

  // ===== HU·ª∂ L·ªúI M·ªúI ƒê√É G·ª¨I =====
  
  Future<bool> cancelFriendRequest(String toUserId) async {
    try {
      final query = await _firestore
          .collection('friendRequests')
          .where('senderId', isEqualTo: currentUserId)
          .where('receiverId', isEqualTo: toUserId)
          .where('status', isEqualTo: 'pending')
          .get();

      if (query.docs.isEmpty) return false;

      await query.docs.first.reference.delete();
      return true;
    } catch (e) {
      print('Error canceling request: $e');
      return false;
    }
  }

  // ===== L·∫§Y TH√îNG TIN REQUEST =====
  
  Future<FriendRequests?> getRequestById(String requestId) async {
    try {
      final doc = await _firestore
          .collection('friendRequests')
          .doc(requestId)
          .get();

      if (!doc.exists) return null;
      return FriendRequests.fromFirestore(doc, null);
    } catch (e) {
      return null;
    }
  }

  // ===== ‚úÖ M·ªöI: BLOCK USER =====
  
  Future<bool> blockUser(String userId) async {
    try {
      // 1. X√≥a b·∫°n b√® (n·∫øu c√≥)
      if (await isFriend(userId)) {
        await removeFriend(userId);
      }

      // 2. X√≥a t·∫•t c·∫£ request gi·ªØa 2 ng∆∞·ªùi
      final requests = await _firestore
          .collection('friendRequests')
          .where('senderId', whereIn: [currentUserId, userId])
          .get();

      for (var doc in requests.docs) {
        final data = doc.data();
        if ((data['senderId'] == currentUserId && data['receiverId'] == userId) ||
            (data['senderId'] == userId && data['receiverId'] == currentUserId)) {
          await doc.reference.delete();
        }
      }

      // 3. Th√™m v√†o blockedUsers
      await _firestore.collection('users').doc(currentUserId).update({
        'blockedUsers': FieldValue.arrayUnion([userId]),
      });

      return true;
    } catch (e) {
      print('Error blocking user: $e');
      return false;
    }
  }

  // ‚úÖ M·ªöI: UNBLOCK USER
  Future<bool> unblockUser(String userId) async {
    try {
      await _firestore.collection('users').doc(currentUserId).update({
        'blockedUsers': FieldValue.arrayRemove([userId]),
      });
      return true;
    } catch (e) {
      print('Error unblocking user: $e');
      return false;
    }
  }

  // ‚úÖ M·ªöI: Ki·ªÉm tra c√≥ block kh√¥ng
  Future<bool> isBlocked(String userId) async {
    try {
      final doc = await _firestore.collection('users').doc(userId).get();
      final blockedUsers = List<String>.from(doc.data()?['blockedUsers'] ?? []);
      return blockedUsers.contains(currentUserId);
    } catch (e) {
      return false;
    }
  }

  // ‚úÖ M·ªöI: L·∫•y danh s√°ch ƒë√£ block
  Future<List<Users>> getBlockedUsers() async {
    try {
      final userDoc = await _firestore.collection('users').doc(currentUserId).get();
      final blockedIds = List<String>.from(userDoc.data()?['blockedUsers'] ?? []);

      if (blockedIds.isEmpty) return [];

      List<Users> blocked = [];
      for (int i = 0; i < blockedIds.length; i += 10) {
        final chunk = blockedIds.skip(i).take(10).toList();
        final query = await _firestore
            .collection('users')
            .where(FieldPath.documentId, whereIn: chunk)
            .get();

        blocked.addAll(query.docs.map((doc) => Users.fromFirestore(doc, null)));
      }

      return blocked;
    } catch (e) {
      return [];
    }
  }

  // ===== ‚úÖ M·ªöI: G·ª¢I √ù B·∫†N B√à =====
  
  // B·∫°n chung
  Future<List<Users>> getMutualFriends(String userId) async {
    try {
      final myFriends = await getFriendIds();
      final userDoc = await _firestore.collection('users').doc(userId).get();
      final theirFriends = List<String>.from(userDoc.data()?['friends'] ?? []);

      final mutualIds = myFriends.where((id) => theirFriends.contains(id)).toList();

      if (mutualIds.isEmpty) return [];

      List<Users> mutual = [];
      for (int i = 0; i < mutualIds.length; i += 10) {
        final chunk = mutualIds.skip(i).take(10).toList();
        final query = await _firestore
            .collection('users')
            .where(FieldPath.documentId, whereIn: chunk)
            .get();

        mutual.addAll(query.docs.map((doc) => Users.fromFirestore(doc, null)));
      }

      return mutual;
    } catch (e) {
      return [];
    }
  }

  // G·ª£i √Ω t·ª´ b·∫°n c·ªßa b·∫°n
  Future<List<Users>> getSuggestedFriends({int limit = 20}) async {
    try {
      final myFriends = await getFriendIds();
      if (myFriends.isEmpty) return [];

      final Set<String> suggested = {};

      // L·∫•y b·∫°n c·ªßa b·∫°n
      for (var friendId in myFriends.take(5)) { // Ch·ªâ l·∫•y 5 ng∆∞·ªùi ƒë·ªÉ tr√°nh qu√° t·∫£i
        final doc = await _firestore.collection('users').doc(friendId).get();
        final theirFriends = List<String>.from(doc.data()?['friends'] ?? []);
        
        for (var id in theirFriends) {
          if (id != currentUserId && !myFriends.contains(id)) {
            suggested.add(id);
          }
        }
      }

      if (suggested.isEmpty) return [];

      final suggestedList = suggested.take(limit).toList();
      List<Users> users = [];

      for (int i = 0; i < suggestedList.length; i += 10) {
        final chunk = suggestedList.skip(i).take(10).toList();
        final query = await _firestore
            .collection('users')
            .where(FieldPath.documentId, whereIn: chunk)
            .get();

        users.addAll(query.docs.map((doc) => Users.fromFirestore(doc, null)));
      }

      return users;
    } catch (e) {
      return [];
    }
  }
}